ДСД - динамические структуры данных


Односвязные списки:
1. Чем больше элементов, тем медленнее мы получаем доступ к данным у конкретного эл.	
2. Гораздо быстрее массивов, если нам нужно часто убирать/добаволять кол. эл.
3. Работа с концом будет медленнее чем с началом списка.

Конструктор копирования и оператор присваивания:
1. Решает проблему с указателями(адресами/ссылками). У каждого объекта 
одного класса свой указатель на свою область динамической памяти.

Стек:
0. Аналогично <магазин он пистолета>
1. Через односвязный список
2. Через массив (struct)

Очередь:
0. Аналогично <очередь в магазине>

ООП:
1.По умолчанию, в классе (class) данные и методы приватные (private); 
они могут быть прочитаны и изменены только классом к которому принадлежат.
Уровень доступа может быть изменен при помощи соответствующих ключевых слов которые предоставляет Си++.

try, throw, catch:
1.Для корректного запуска программы необходимо также произвести настройки среды разработки и разрешить обработку структурных исключений. Для этого переходим к меню Имя проекта->Свойства
Имя проекта - Свойства. И для пункта меню C/C++ ->Code Generation->Enable C++ Exceptions устанавливаем значение Yes With SEH Exceptions (/EHa).

Графы:
1. Преимущества списка смежности:
    Рациональное использование памяти.
    Позволяет быстро перебирать соседей вершины.
    Позволяет проверять наличие ребра и удалять его.
2. Недостатки списка смежности:
    При работе с насыщенными графами (с большим количеством рёбер) скорости может не хватать.
    Нет быстрого способа проверить, существует ли ребро между двумя вершинами.
    Количество вершин графа должно быть известно заранее.
    Для взвешенных графов приходится хранить список, элементы которого должны содержать два значащих поля, что усложняет код:
        номер вершины, с которой соединяется текущая;
        вес ребра.

https://prog-cpp.ru/data-graph/
